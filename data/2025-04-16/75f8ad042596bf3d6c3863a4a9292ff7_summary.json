{
  "title": "17 Reasons Why Gradio Isn't Just Another UI Library",
  "link": "https://huggingface.co/blog/why-gradio-stands-out",
  "published": "2025-04-16",
  "summary": "好的，下面是该文章的中英双语摘要，保留了公式与术语：\n\n**摘要：**\n\n**英文:**\n\nThis article highlights 17 reasons why Gradio is more than just a UI library, positioning it as a framework for interacting with machine learning models through UIs and APIs.  Gradio offers features such as universal API access through official SDKs in Python (`gradio_client`) and JavaScript (`@gradio/client`), as well as support for cURL API access, with automatic REST API endpoint generation. Other key features include interactive API recorders, server-side rendering for fast ML apps, automatic queue management, high-performance streaming for real-time outputs, integrated multi-page application support, client-side function execution with Groovy, comprehensive theming, dynamic interfaces, visual interface development with Gradio Sketch, PWA support, in-browser execution with Gradio Lite, AI-assisted tooling, hassle-free app sharing, enterprise-grade security, enhanced Dataframe component, and Deep Links for sharing app states. The article emphasizes Gradio's focus on performance, security, and responsiveness for building powerful AI applications.\n\n**中文:**\n\n本文强调了 Gradio 不仅仅是一个 UI 库的 17 个原因，而是将其定位为一个通过 UI 和 API 与机器学习模型交互的框架。Gradio 提供了诸如通用 API 访问的功能，通过官方 Python (`gradio_client`) 和 JavaScript (`@gradio/client`) 的 SDK，以及对 cURL API 访问的支持，并自动生成 REST API 端点。其他关键特性包括：交互式 API 记录器、用于快速 ML 应用的服务器端渲染、自动队列管理、用于实时输出的高性能流式传输、集成的多页面应用程序支持、使用 Groovy 的客户端函数执行、全面的主题系统、动态界面、使用 Gradio Sketch 的可视化界面开发、PWA 支持、使用 Gradio Lite 的浏览器内执行、AI 辅助工具、轻松的应用程序共享、企业级安全性、增强的 Dataframe 组件以及用于共享应用程序状态的深度链接。文章强调了 Gradio 对性能、安全性和响应性的关注，旨在构建强大的 AI 应用程序。\n\n## Gradio App Features摘要 (Summary of Gradio App Features)\n\n**中文:**\n\nGradio应用程序提供以下关键特性：\n\n1.  **自动生成的API文档：** 通过“View API”链接访问，方便用户了解API接口。\n2.  **客户端库：** 包含高级功能，如文件处理和Hugging Face Space复制，方便用户通过编程方式与Gradio应用交互。\n3.  **交互式API录制器：** 从Gradio 4.26版本开始引入，可以实时捕获UI交互，并自动生成Python或JavaScript代码，用于记录API的使用方法。\n4.  **服务器端渲染 (SSR)：** 从Gradio 5.0版本开始引入，显著提升了应用程序的加载速度和性能。SSR在服务器端预渲染UI，消除了加载动画，实现了更快的初始页面加载，并改善了已发布应用的SEO。SSR会自动在Hugging Face Spaces部署中启用。\n\n**Gradio的优势:**\n\n*   大多数其他Python框架缺少官方API访问机制。Gradio从单一实现自动生成UI和API端点，包括文档。\n*   API录制器可以轻松脚本化UI交互，这在大多数其他Python和Web框架中难以实现。\n*   传统的Python UI框架仅限于客户端渲染。\n\n**英文:**\n\nGradio apps offer the following key features:\n\n1.  **Automatically-generated API documentation:** Accessible through the \"View API\" link, providing easy access to API interface information.\n2.  **Client libraries:** Include advanced features like file handling and Hugging Face Space duplication, facilitating programmatic interaction with Gradio apps.\n3.  **Interactive API Recorder:** Introduced in Gradio version 4.26, allowing real-time capture of UI interactions and automatic generation of Python or JavaScript code for documenting API usage.\n4.  **Server-Side Rendering (SSR):** Introduced in Gradio version 5.0, significantly improving application loading speed and performance. SSR pre-renders the UI on the server, eliminating loading spinners, enabling faster initial page load times, and improving SEO for published applications. SSR is automatically enabled for Hugging Face Spaces deployments.\n\n**What Sets Gradio Apart:**\n\n*   Most other Python frameworks lack official API access mechanisms. Gradio automatically generates both UI and API endpoints from a single implementation, including documentation.\n*   The API Recorder allows easy scripting of UI interactions, which is difficult to achieve in most other Python and Web frameworks.\n*   Traditional Python UI frameworks are limited to client-side rendering.\n\nOkay, here's a summary of the provided text, with both English and Chinese versions, preserving formulas and terminology:\n\n**English Summary:**\n\nGradio simplifies building high-performance ML web applications by providing features like automatic queue management and high-performance streaming. Unlike other Python frameworks, Gradio offers built-in queue management, eliminating the need for manual implementation of queuing systems that would be required for popular web frameworks and allowing for the creation of GPU-intensive or viral ML applications. Gradio's queuing system automatically handles diverse tasks (GPU-intensive computations, streaming, non-ML tasks), enables scaling to thousands of concurrent users, provides real-time queue status updates via Server-Side Events, and allows configuring concurrency limits using `concurrency_id`. Furthermore, Gradio supports real-time, low-latency streaming using Python generators with `yield` statements, enabling token-by-token text generation, step-by-step image generation, and smooth audio/video streaming via HTTP Live Streaming (HLS) protocol, and provides WebRTC/WebSocket API for real-time applications via `FastRTC`.  This is all achieved while maintaining a pure Python development experience, although Node.js installation is required.\n\n**Chinese Summary:**\n\nGradio通过提供自动队列管理和高性能流式传输等功能，简化了高性能机器学习Web应用程序的构建。与其他Python框架不同，Gradio提供了内置的队列管理，无需像使用流行的Web框架那样手动实现队列系统，从而可以创建GPU密集型或病毒式ML应用程序。Gradio的队列系统自动处理各种任务（GPU密集型计算、流式传输、非ML任务），支持扩展到数千并发用户，通过Server-Side Events提供实时队列状态更新，并允许使用`concurrency_id`配置并发限制。此外，Gradio支持使用带有`yield`语句的Python生成器进行实时、低延迟流式传输，从而实现token-by-token文本生成、step-by-step图像生成以及通过HTTP Live Streaming (HLS) 协议实现流畅的音频/视频流，并通过`FastRTC`提供用于实时应用程序的WebRTC/WebSocket API。所有这些都在保持纯Python开发体验的同时实现，尽管需要安装Node.js。\n\n好的，这里是该内容的摘要，包含中英文版本，并保留了公式和术语：\n\n**摘要 (中文)**\n\nGradio 5 的改进包括：\n\n*   **流式传输增强:** Gradio 允许使用 FastRTC 和 Gradio 完全使用 Python 创建实时音频/视频流应用程序，而其他框架需要手动线程管理和轮询更新，或需要自定义 WebSocket/WebRTC 实现。\n*   **集成多页面应用支持:** Gradio 现在原生支持多页面应用，允许开发者构建更全面的 AI/ML 应用。它提供自动 URL 路由和导航栏生成，并在页面之间共享后端资源（如队列）。这提高了文件可维护性和测试性。Gradio 通过简单的 Python 声明提供自动路由和导航栏，无需像其他框架那样为每个页面编写单独的脚本或显式设置路由。\n*   **使用 Groovy 的新客户端函数执行:** Gradio 5 引入了 Groovy，一个自动 Python 到 JavaScript 的转换库，允许在客户端直接执行 Python 函数 (通过 `js=True` 标记)，无需服务器往返即可实现即时 UI 响应。这减少了简单 UI 交互的延迟，并降低了服务器负载。\n\n**摘要 (English)**\n\nGradio 5 improvements include:\n\n*   **Streaming Improvements:** Gradio allows creating real-time audio/video streaming applications entirely in Python with FastRTC and Gradio. Other frameworks require manual thread management and polling for streaming updates, or custom WebSocket/WebRTC implementations.\n*   **Integrated Multi-Page Application Support:** Gradio now natively supports multi-page applications, enabling developers to build more comprehensive AI/ML applications. It provides automatic URL routing and navigation bar generation and shares backend resources (such as the queue) across pages. This improves file maintainability and testing. Gradio offers automatic routing and navigation bars using simple Python declarations, eliminating the need for separate scripts for each page or explicit routing setup like other frameworks.\n*   **New Client-Side Function Execution With Groovy:** Gradio 5 introduces Groovy, an automatic Python-to-JavaScript transpilation library, allowing direct execution of Python functions on the client-side (via the `js=True` flag) for instant UI responsiveness without server roundtrips. This reduces latency for simple UI interactions and lowers server load.\n\n## 摘要 (Summary)\n\n**英文 (English):**\n\nGradio distinguishes itself by offering a single-language (Python) development experience through automatic transpilation to JavaScript, enabling web-native performance without requiring separate JavaScript codebases, unlike most other Python frameworks.  It features a comprehensive theming system with ready-to-use presets (Monochrome, Soft, Ocean, Glass, etc.) including built-in dark mode support, automatic mobile responsiveness, and accessibility features for screen readers. Gradio provides ML-specific UI components such as Undo/Retry/Like buttons for chat interfaces, ImageEditor and AnnotatedImage components for segmentation/masking, and ImageSlider for image-to-image transformations. Recent enhancements focus on UI features for Reasoning LLMs, Agents, Multistep Agents, Nested Thoughts, and Nested Agents within chat interfaces. Furthermore, Gradio allows creating professional UIs without web design expertise and offers a dynamic interface feature using the `@gr.render()` decorator. This sets Gradio apart from other Python frameworks that offer limited color customization and require manual theme and CSS implementation.\n\n**中文 (Chinese):**\n\nGradio 的独特之处在于，它通过自动转译为 JavaScript，提供了一种单语言 (Python) 开发体验，从而实现了 web 原生性能，无需像大多数其他 Python 框架那样使用单独的 JavaScript 代码库。 它具有全面的主题系统，提供即用型预设主题（例如 Monochrome、Soft、Ocean、Glass 等），包括内置的暗黑模式支持、自动的移动响应能力和屏幕阅读器的可访问性功能。 Gradio 提供特定于 ML 的 UI 组件，例如聊天界面的撤消/重做/喜欢按钮、用于分割/掩码的 ImageEditor 和 AnnotatedImage 组件，以及用于图像到图像转换的 ImageSlider。 最近的增强功能侧重于聊天界面中推理 LLM、Agent、多步 Agent、嵌套思维和嵌套 Agent 的 UI 功能。 此外，Gradio 允许在没有 Web 设计专业知识的情况下创建专业的 UI，并使用 `@gr.render()` 装饰器提供动态界面功能。 这使得 Gradio 与其他提供有限颜色自定义并需要手动主题和 CSS 实现的 Python 框架区分开来。\n\n**Key Terms & Formula (关键术语和公式):**\n\n*   `@gr.render()`: Decorator for dynamic interfaces. (动态界面的装饰器)\n*   UI Components (用户界面组件): Undo/Retry/Like buttons, ImageEditor, AnnotatedImage, ImageSlider. (撤消/重做/喜欢按钮、图像编辑器、注释图像、图像滑块)\n*   Theming System (主题系统): Monochrome, Soft, Ocean, Glass. (单色、柔和、海洋、玻璃)\n*   LLMs, Agents, Multistep Agents, Nested Thoughts, Nested Agents (LLM、Agent、多步 Agent、嵌套思维、嵌套 Agent)\n\n## 摘要 (Summary):\n\n**English:**\n\nGradio now supports dynamic UI updates and a visual development environment, significantly enhancing its capabilities. Developers can now add new components and event listeners dynamically based on user interaction and state, enabling on-the-fly UI modifications based on model outputs or workflow.  Gradio's `.render()` method allows rendering Blocks within other Blocks.  Furthermore, Gradio Sketch introduces a no-code visual interface development tool (WYSIWYG editor) for building Gradio applications. Users can visually add components, define events, attach functions, and generate the corresponding code automatically, including code for inference functions.  Finally, Gradio offers Progressive Web App (PWA) support.\n\n**Key Features:**\n\n*   **Dynamic UI Updates:**  Add components and listeners dynamically based on user interaction/state.\n*   **`render()` method:** Render Blocks within other Blocks.\n*   **Gradio Sketch:** No-code visual interface development (WYSIWYG editor) for building Gradio applications.\n*   **PWA Support:** Gradio provides Progressive Web App capabilities.\n\n**优势 (Advantages):**\n\n*   **Dynamic UI:** Simplifies the creation of sophisticated and responsive interfaces using Python, unlike other frameworks that require JavaScript for interface updates.\n*   **Gradio Sketch:** Reduces the learning curve for non-coders and accelerates application development.\n*   **PWA:** Provides regular web pages.\n\n---\n\n**中文:**\n\nGradio现在支持动态UI更新和一个可视化开发环境，从而显著增强了其功能。开发者现在可以基于用户交互和状态动态地添加新组件和事件监听器，从而能够根据模型输出或工作流程进行即时UI修改。Gradio的 `.render()` 方法允许在一个Block中渲染另一个Block。此外，Gradio Sketch 引入了一个无代码的可视化界面开发工具（WYSIWYG编辑器），用于构建Gradio应用程序。用户可以可视化地添加组件、定义事件、附加函数，并自动生成相应的代码，包括推理函数的代码。 最后，Gradio提供渐进式Web应用（PWA）支持。\n\n**关键特性：**\n\n*   **动态 UI 更新:** 基于用户交互/状态动态添加组件和监听器。\n*   **`render()` 方法:** 在另一个Block中渲染Blocks。\n*   **Gradio Sketch:** 用于构建Gradio应用程序的无代码可视化界面开发（WYSIWYG编辑器）。\n*   **PWA 支持:** Gradio提供渐进式Web应用功能。\n\n**优势：**\n\n*   **动态 UI:** 简化了使用Python创建复杂且响应式界面的过程，不同于其他需要JavaScript进行界面更新的框架。\n*   **Gradio Sketch:** 降低了非编码人员的学习曲线，并加速了应用程序开发。\n*   **PWA:** 提供常规网页。\n\n## 摘要 (Summary):\n\n**中文:**\n\nGradio 通过以下特性简化了机器学习 (ML) 应用的开发和部署：\n\n*   **渐进式 Web 应用 (PWA) 支持:** Gradio 提供原生 PWA 支持，允许创建看似平台专属的可安装应用，无需额外配置即可用于移动和桌面平台。这扩展了用户访问范围，并能快速创建带有自定义图标的移动应用。\n*   **浏览器内执行 (Gradio Lite):**  利用 Pyodide (WebAssembly)，Gradio Lite 实现了浏览器端的执行，允许使用客户端模型推理服务（如 Transformers.js 和 ONNX）构建 ML 演示。 优势包括增强的隐私（所有数据保留在用户浏览器中）、零服务器部署成本和离线模型推理能力。\n*   **AI 辅助工具加速开发:** Gradio 引入了创新功能来加速 ML 应用开发周期，包括热重载功能、用于自然语言驱动的应用生成的 AI Playground，以及与 HuggingFace 和推理提供商的集成，可以用单行代码快速构建应用原型。\n\n**英文:**\n\nGradio simplifies the development and deployment of Machine Learning (ML) applications through the following features:\n\n*   **Progressive Web App (PWA) Support:** Gradio offers native PWA support, allowing the creation of installable platform-specific applications that appear so to the user, without the need for extra configurations for mobile and desktop platforms. This expands user access and enables rapid creation of mobile apps with custom icons.\n*   **In-Browser Execution (Gradio Lite):** Utilizing Pyodide (WebAssembly), Gradio Lite enables browser-side execution, allowing the building of ML demos using client-side model inference services like Transformers.js and ONNX.  Benefits include enhanced privacy (all data stays in the user's browser), zero server costs for deployment, and offline-capable model inference.\n*   **Accelerated Development with AI-Assisted Tooling:** Gradio introduces innovative features to accelerate the ML application development cycle, including a hot reload capability, AI Playground for natural language-driven app generation, and integrations with HuggingFace and Inference providers, enabling rapid prototyping of applications in a single line of code.\n\n## 摘要 (Summary)\n\n**中文：**\n\nGradio 可以通过 `gr.load()` 与兼容 OpenAI 的 API 接口一起使用。Gradio 的独特之处在于它提供了即时的 UI 反馈和 AI 辅助开发，从而实现了快速开发和修改机器学习 (ML) 应用。应用程序可以通过设置 `demo.launch(share=True)` 参数生成一个即时公共 URL，格式为 `xxxxx.gradio.live`，有效期为 1 周。此共享链接使用 Fast Reverse Proxy (FRP) 通过 Gradio 的共享服务器建立到本地运行应用程序的安全 TLS 通道。对于企业部署或需要自定义域名或额外安全措施的情况，可以托管自己的 FRP 服务器以避免 1 周的超时。与其他框架不同，Gradio 无需云部署和大量配置即可轻松共享应用程序，而其他 Web 框架则需要手动服务器设置和托管。\n\n**英文：**\n\nGradio can be used with any API endpoint that is compatible with OpenAI, achievable with `gr.load()`. It stands out by offering instant UI feedback and AI-assisted development, enabling rapid creation and modification of Machine Learning (ML) applications. You can generate an instant public URL by simply setting the parameter `demo.launch(share=True)`, creating an address in the format `xxxxx.gradio.live` that lasts for 1 week. This share link creates a secure TLS tunnel to your locally-running app through Gradio's share server using Fast Reverse Proxy (FRP). For enterprise deployments or scenarios requiring custom domains or additional security, you can host your own FRP server to avoid the 1-week timeout. Unlike other frameworks, Gradio offers instant sharing from your local development environment without cloud deployment and lots of configuration, while other Web frameworks require manual server setup and hosting.\n\n## 摘要 (Summary)\n\n**英文 (English):**\n\nGradio offers immediate collaboration and demonstration capabilities through share links without requiring hosting or port forwarding, making it ideal for rapid prototyping and gathering feedback on machine learning apps.  Gradio has evolved into a production-ready framework with enterprise-grade security, including third-party security audits and vulnerability assessments.  Security enhancements include hardened file handling and upload controls, configurable security settings via environment variables such as `GRADIO_ALLOWED_PATHS` and `GRADIO_SSR_MODE`.  Unlike other Python web frameworks, Gradio provides specialized security for ML deployment, including protected file upload handling and sanitized model I/O processing.  The enhanced dataframe component features multi-cell selection, row numbers, column pinning, search/filter functions, static columns, and improved accessibility.\n\n**中文 (Chinese):**\n\nGradio 通过分享链接提供即时协作和演示功能，无需托管或端口转发，非常适合快速原型设计和收集机器学习应用程序的反馈。Gradio 已经发展成为一个具有企业级安全性的、可用于生产环境的框架，包括来自第三方的安全审计和漏洞评估。安全增强功能包括加强的文件处理和上传控制，以及通过环境变量（例如 `GRADIO_ALLOWED_PATHS` 和 `GRADIO_SSR_MODE`）进行配置的安全设置。 与其他 Python Web 框架不同，Gradio 为 ML 部署提供专门的安全保障，包括受保护的文件上传处理和经过清理的模型 I/O 处理。 增强的 Dataframe 组件具有多单元格选择、行号、列固定、搜索/筛选功能、静态列以及改进的可访问性。\n\n## 摘要 (Summary):\n\n**English:**\n\nGradio has evolved into an AI-focused framework for building complete web applications in Python without web development expertise. Innovations in Gradio 4 and 5, like Python-to-JavaScript transpilation, built-in queuing for resource-intensive models, real-time audio-video streaming with FastRTC, and server-side rendering, differentiate it from other frameworks by providing capabilities that often require extensive implementation work.  Key features include:\n\n*   **Deep Links:** Enabled by the `gr.DeepLinkButton` component, they allow users to capture and share the exact state of an application, working with any public Gradio app (hosted or using `share=True`). This simplifies sharing of generated output without additional implementation.\n\nGradio handles infrastructure concerns, allowing developers to focus on model development while delivering polished UIs. It supports both rapid prototyping and production deployment.\n\n**中文:**\n\nGradio已发展成为一个以人工智能为中心的框架，可以使用 Python 构建完整的 Web 应用程序，而无需 Web 开发专业知识。Gradio 4 和 5 的创新，例如 Python 到 JavaScript 的转译、针对资源密集型模型的内置队列、使用 FastRTC 的实时音视频流和服务器端渲染，使其与其他框架区分开来，因为它们提供了通常需要大量实现工作才能实现的功能。关键特性包括：\n\n*   **深度链接 (Deep Links):** 通过 `gr.DeepLinkButton` 组件启用，允许用户捕获和共享应用程序的精确状态，适用于任何公共 Gradio 应用程序（托管或使用 `share=True`）。 这简化了生成输出的共享，而无需额外的实施。\n\nGradio 处理基础设施问题，使开发人员能够专注于模型开发，同时提供完善的用户界面。 它支持快速原型设计和生产部署。\n\nHere's a summary of the provided text, in both English and Chinese:\n\n**English Summary:**\n\nThis text highlights the capabilities of Gradio, a tool that empowers a wide audience. It mentions a blog post celebrating reaching 1 million Gradio users (published April 4, 2025, by abidlabs) and introduces a new Gradio Dataframe feature (published March 24, 2025, by hmb). A community post reports an error encountered while using `torch.load()` in a Gradio space: `_pickle.UnpicklingError: invalid load key, 'v'`. The user is attempting to load a model and receives the error when unpickling. The space involves KokoroTTS for custom voices, and the user is asking about the correct `torch` version. Functionality for uploading images, audio, and video is also mentioned, along with a prompt to sign up or log in to comment.  The error stack trace contains: `torch.serialization.py`, `_pickle.UnpicklingError`, `torch.load(path, map_location='cuda', weights_only=False)['net'].items()`.\n\n**Chinese Summary:**\n\n这段文字强调了 Gradio 的功能，它是一个赋能广大用户的工具。 它提到了一篇庆祝达到 100 万 Gradio 用户的博客文章（由 abidlabs 于 2025 年 4 月 4 日发布），并介绍了一个新的 Gradio Dataframe 功能（由 hmb 于 2025 年 3 月 24 日发布）。 一篇社区帖子报告了在使用 Gradio space 中的 `torch.load()` 时遇到的错误：`_pickle.UnpicklingError: invalid load key, 'v'`。 用户尝试加载模型时，在反序列化时收到了错误。 该 space 涉及用于自定义语音的 KokoroTTS，用户正在询问正确的 `torch` 版本。还提到了上传图像、音频和视频的功能，以及注册或登录以发表评论的提示。 错误堆栈跟踪包含：`torch.serialization.py`，`_pickle.UnpicklingError`，`torch.load(path, map_location='cuda', weights_only=False)['net'].items()`。"
}